
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'No compatible host for Secondary VM',
   systemName = 'alarm.VmNoCompatibleHostForSecondaryAlarm',
   description = 'Default alarm to monitor if no compatible hosts are available to place Secondary VM',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmNoCompatibleHostForSecondaryEvent,
            eventTypeId = 'vim.event.VmNoCompatibleHostForSecondaryEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-10',
   alarm = 'vim.alarm.Alarm:alarm-10',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.710999Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host error',
   systemName = 'alarm.HostErrorAlarm',
   description = 'Default alarm to monitor host error and warning events',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostErrorEvent,
            eventTypeId = 'vim.event.GeneralHostErrorEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostWarningEvent,
            eventTypeId = 'vim.event.GeneralHostWarningEvent',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-11',
   alarm = 'vim.alarm.Alarm:alarm-11',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.759Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual machine error',
   systemName = 'alarm.VmErrorAlarm',
   description = 'Default alarm to monitor virtual machine error and warning events',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmErrorEvent,
            eventTypeId = 'vim.event.GeneralVmErrorEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmWarningEvent,
            eventTypeId = 'vim.event.GeneralVmWarningEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-12',
   alarm = 'vim.alarm.Alarm:alarm-12',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.795Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host hardware sensor state',
   systemName = 'alarm.HardwareSensorStateChange',
   description = "Default alarm to monitor sensor state change.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorEvent',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = 'alarm-125',
   alarm = 'vim.alarm.Alarm:alarm-125',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.837Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host connection failure',
   systemName = 'alarm.HostConnectivityAlarm',
   description = 'Default alarm to monitor host connection failure',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostCnxFailedNetworkErrorEvent,
            eventTypeId = 'vim.event.HostCnxFailedNetworkErrorEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostCnxFailedTimeoutEvent,
            eventTypeId = 'vim.event.HostCnxFailedTimeoutEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostConnectionLostEvent,
            eventTypeId = 'vim.event.HostConnectionLostEvent',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-13',
   alarm = 'vim.alarm.Alarm:alarm-13',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.843Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Cannot connect to storage',
   systemName = 'alarm.StorageConnectivityAlarm',
   description = 'Default alarm to monitor host connectivity to storage device',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.storage.connectivity.lost',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.storage.redundancy.lost',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.storage.redundancy.degraded',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.problem.vmfs.nfs.server.disconnect',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-14',
   alarm = 'vim.alarm.Alarm:alarm-14',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.928Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Migration error',
   systemName = 'alarm.MigrationErrorAlarm',
   description = 'Default alarm to monitor if a virtual machine cannot migrate, relocate, or is orphaned',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmFailedMigrateEvent,
            eventTypeId = 'vim.event.VmFailedMigrateEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.MigrationErrorEvent,
            eventTypeId = 'vim.event.MigrationErrorEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.MigrationHostErrorEvent,
            eventTypeId = 'vim.event.MigrationHostErrorEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmRelocateFailedEvent,
            eventTypeId = 'vim.event.VmRelocateFailedEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmOrphanedEvent,
            eventTypeId = 'vim.event.VmOrphanedEvent',
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-15',
   alarm = 'vim.alarm.Alarm:alarm-15',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.007Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Exit standby error',
   systemName = 'alarm.ExitStandbyErrorAlarm',
   description = 'Default alarm to monitor if a host cannot exit standby mode',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.ExitStandbyModeFailedEvent,
            eventTypeId = 'vim.event.ExitStandbyModeFailedEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.DrsExitStandbyModeFailedEvent,
            eventTypeId = 'vim.event.DrsExitStandbyModeFailedEvent',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-16',
   alarm = 'vim.alarm.Alarm:alarm-16',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.056999Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'License error',
   systemName = 'alarm.LicenseError',
   description = 'Default alarm to monitor license errors',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VMotionLicenseExpiredEvent,
            eventTypeId = 'vim.event.VMotionLicenseExpiredEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostLicenseExpiredEvent,
            eventTypeId = 'vim.event.HostLicenseExpiredEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.ServerLicenseExpiredEvent,
            eventTypeId = 'vim.event.ServerLicenseExpiredEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.LicenseExpiredEvent,
            eventTypeId = 'vim.event.LicenseExpiredEvent',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.LicenseServerUnavailableEvent,
            eventTypeId = 'vim.event.LicenseServerUnavailableEvent',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-17',
   alarm = 'vim.alarm.Alarm:alarm-17',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.103999Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Health status changed alarm',
   systemName = 'alarm.HealthStatusChangedAlarm',
   description = 'Default alarm to monitor changes to service and extension health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = true,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = 'alarm-18',
   alarm = 'vim.alarm.Alarm:alarm-18',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.172Z,
   lastModifiedUser = '',
   creationEventId = 0
}
