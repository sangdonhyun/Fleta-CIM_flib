###***alarm list***###
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host connection and power state',
   systemName = 'alarm.HostConnectionStateAlarm',
   description = 'Default alarm to monitor host connection and power state',
   enabled = true,
   expression = (vim.alarm.AndAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.StateAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isEqual',
            type = vim.HostSystem,
            statePath = u'runtime.connectionState',
            yellow = <unset>,
            red = 'notResponding'
         },
         (vim.alarm.StateAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isUnequal',
            type = vim.HostSystem,
            statePath = u'runtime.powerState',
            yellow = <unset>,
            red = 'standBy'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-1',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.215654Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'No compatible host for Secondary VM',
   systemName = 'alarm.VmNoCompatibleHostForSecondaryAlarm',
   description = 'Default alarm to monitor if no compatible hosts are available to place Secondary VM',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmNoCompatibleHostForSecondaryEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-10',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.711487Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Update Manager Service Health Alarm',
   systemName = 'alarm.UpdateMgrHealthAlarm',
   description = 'Default alarm that monitors the health status of Update Manager Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'updatemgr'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'updatemgr'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'updatemgr'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'updatemgr'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-100',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.387569Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vMon API Service Health Alarm',
   systemName = 'alarm.VmonApiHealthAlarm',
   description = 'Default alarm that monitors the health status of vMon API Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmonapi'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmonapi'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmonapi'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmonapi'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-101',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.452043Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Component Manager Service Health Alarm',
   systemName = 'alarm.ComponentMgrHealthAlarm',
   description = 'Default alarm that monitors the health status of Component Manager Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-102',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.487478Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMware vSphere Authentication Proxy Service Health Alarm',
   systemName = 'alarm.VsphereAuthProxyHealthAlarm',
   description = 'Default alarm that monitors the health status of VMware vSphere Authentication Proxy Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmcam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmcam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmcam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmcam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-103',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.523379Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSAN Health Service Alarm',
   systemName = 'alarm.VsanHealthAlarm',
   description = 'Default alarm that monitors the health status of vSAN Health Services.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-health'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-health'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-health'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-health'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-104',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.561465Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'PostgreSQL Archiver Service Health Alarm',
   systemName = 'alarm.VmwarePgArchiverHealthAlarm',
   description = 'Default alarm that monitors the health status of PostgreSQL Archiver Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-postgres-archiver'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-postgres-archiver'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-postgres-archiver'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-postgres-archiver'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-105',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.597406Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMware vCenter-Services Health Alarm',
   systemName = 'alarm.VpxdSvcsHealthAlarm',
   description = 'VMware vCenter-Services alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd-svcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd-svcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd-svcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd-svcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-106',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.830259Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSAN Data Protection Service Health Alarm',
   systemName = 'alarm.VsanDpsHealthAlarm',
   description = 'Default alarm that monitors the health status of vSAN Data Protection Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-dps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-dps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-dps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsan-dps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-107',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.885946Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Hybrid vCenter Service Health Alarm',
   systemName = 'alarm.HvcHealthAlarm',
   description = 'Default alarm that monitors the health status of Hybrid vCenter Service',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'hvc'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'hvc'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'hvc'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'hvc'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-108',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.933375Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host TPM attestation alarm',
   systemName = 'alarm.TPMAttestationAlarm',
   description = 'Default alarm that indicates host TPM attestation failure.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.host.TPMAttestationFailedEvent',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-109',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.005194Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host error',
   systemName = 'alarm.HostErrorAlarm',
   description = 'Default alarm to monitor host error and warning events',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostErrorEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostWarningEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-11',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.759439Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Improved virtual disk infrastructure namespaces storage policy alarm',
   systemName = 'alarm.VStorageObjectInfraNamespacePolicyAlarm',
   description = 'Default alarm to monitor improved virtual disk infrastructure namespace storage policy status on the host.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.host.problem.VStorageObjectInfraNamespacePolicyEmptyEvent',
            objectType = vim.Datastore,
            status = 'yellow'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-110',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.053258Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'KMS Client Certificate Status',
   systemName = 'alarm.KMSClientCertificateStatusAlarm',
   description = 'This alarm indicates that the KMS client certificate is getting close to its expiration date.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.vecs.KMSClientCertExpirationEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-111',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.088906Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'KMS Server Certificate Status',
   systemName = 'alarm.KMSServerCertificateStatusAlarm',
   description = 'This alarm indicates that the KMS server certificate is getting close to its expiration date.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.vecs.KMSServerCertExpirationEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-112',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.136751Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual Machine Locked Alarm',
   systemName = 'alarm.VmCryptoStateLockedAlarm',
   description = 'Alarm to indicate that the virtual machine is locked.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmErrorEvent,
            eventTypeId = 'com.vmware.vc.vm.Crypto.VMLocked.KeyMissingOnHost',
            objectType = vim.VirtualMachine,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmErrorEvent,
            eventTypeId = 'com.vmware.vc.vm.Crypto.VMLocked.KeyMissingOnKMS',
            objectType = vim.VirtualMachine,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmErrorEvent,
            eventTypeId = 'com.vmware.vc.vm.Crypto.VMLocked.KMSClusterError',
            objectType = vim.VirtualMachine,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmErrorEvent,
            eventTypeId = 'com.vmware.vc.vm.Crypto.VMUnlocked',
            objectType = vim.VirtualMachine,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-113',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.178795Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host Requires Encryption Mode Enabled Alarm',
   systemName = 'alarm.HostRequiresEncryptionModeEnabledAlarm',
   description = 'Alarm to indicate that the host requires encryption mode enabled.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostErrorEvent,
            eventTypeId = 'com.vmware.vc.host.Crypto.ReqEnable.KeyMissingOnKMS',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostErrorEvent,
            eventTypeId = 'com.vmware.vc.host.Crypto.ReqEnable.KMSClusterError',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostErrorEvent,
            eventTypeId = 'com.vmware.vc.crypto.HostKeyUpdatedEvent',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralHostErrorEvent,
            eventTypeId = 'com.vmware.vc.host.Crypto.Enabled',
            objectType = vim.HostSystem,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-114',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.226621Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host processor status',
   systemName = 'alarm.ProcessorHealthAlarm',
   description = "Default alarm to monitor processors.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'processor',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'processor',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-115',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.286551Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host memory status',
   systemName = 'alarm.MemoryHealthAlarm',
   description = "Default alarm to monitor memory.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'memory',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'memory',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-116',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.346401Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host hardware fan status',
   systemName = 'alarm.FanHealthAlarm',
   description = "Default alarm to monitor fans.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'fan',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'fan',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-117',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.40025Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host hardware voltage',
   systemName = 'alarm.VoltageHealthAlarm',
   description = "Default alarm to monitor voltage.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'voltage',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'voltage',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-118',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.46961Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host hardware temperature status',
   systemName = 'alarm.TemperatureHealthAlarm',
   description = "Default alarm to monitor temperature.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'temperature',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'temperature',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-119',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.559609Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual machine error',
   systemName = 'alarm.VmErrorAlarm',
   description = 'Default alarm to monitor virtual machine error and warning events',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmErrorEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.GeneralVmWarningEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-12',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.795198Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host hardware power status',
   systemName = 'alarm.PowerHealthAlarm',
   description = "Default alarm to monitor power.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'power',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'power',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-120',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.607347Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host hardware system board status',
   systemName = 'alarm.SystemBoardHealthAlarm',
   description = "Default alarm to monitor system boards.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'systemBoard',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'systemBoard',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-121',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.651689Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host battery status',
   systemName = 'alarm.BatteryHealthAlarm',
   description = "Default alarm to monitor batteries.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'battery',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'battery',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-122',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.707457Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Status of other host hardware objects',
   systemName = 'alarm.OtherHealthAlarm',
   description = "Default alarm to monitor objects.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'other',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'other',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-123',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.756563Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host storage status',
   systemName = 'alarm.StorageHealthAlarm',
   description = "Default alarm to monitor storage.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'storage',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'storage',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-124',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.801061Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host hardware sensor state',
   systemName = 'alarm.HardwareSensorStateChange',
   description = "Default alarm to monitor sensor state change.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorEvent',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-125',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:38.837107Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Memory Exhaustion on 10',
   systemName = 'Memory Exhaustion on 10',
   description = 'Alarm that monitors vSphere Memory Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'mem_usage'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'mem_usage'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'mem_usage'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-126',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:54:26.61597Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'CPU Exhaustion on 10',
   systemName = 'CPU Exhaustion on 10',
   description = 'Alarm that monitors vSphere CPU Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'cpu_util'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'cpu_util'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'cpu_util'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-127',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:54:29.093719Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vCenter HA Cluster Health Alarm',
   systemName = 'alarm.VCHAHealthAlarm',
   description = 'Default alarm that monitors the health of vCenter HA',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.cluster.state.destroyed',
            objectType = <unset>,
            status = 'gray'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.cluster.state.isolated',
            objectType = <unset>,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.cluster.state.degraded',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.cluster.state.healthy',
            objectType = <unset>,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-128',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:55:43.548799Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\Administrator',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Failover Failed Alarm',
   systemName = 'alarm.FailoverFailedAlarm',
   description = 'Alarm to indicate that failover has failed',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.failover.flush.failed.unknown',
            objectType = <unset>,
            status = 'gray'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.failover.flush.failed.degraded',
            objectType = <unset>,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.failover.flush.failed.healthy',
            objectType = <unset>,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-129',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:55:43.640639Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\Administrator',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host connection failure',
   systemName = 'alarm.HostConnectivityAlarm',
   description = 'Default alarm to monitor host connection failure',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostCnxFailedNetworkErrorEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostCnxFailedTimeoutEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostConnectionLostEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-13',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.843255Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMware Directory Service Health Alarm',
   systemName = 'alarm.VmdirHealthAlarm',
   description = 'Default alarm that monitors the health of VMware Directory Service',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.vmdir.health.unknown',
            objectType = <unset>,
            status = 'gray'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.vmdir.health.degraded',
            objectType = <unset>,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vcha.vmdir.health.healthy',
            objectType = <unset>,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-130',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:55:43.844444Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\Administrator',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Controller disk group mode is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.controllerdiskmode',
   description = "Default alarm to monitor changes for the health test 'Controller disk group mode is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdiskmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdiskmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdiskmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdiskmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdiskmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-131',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:20.902118Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN object data protection health'",
   systemName = 'alarm.vsan.health.test.dataprotection.objectdphealth',
   description = "Default alarm to monitor changes for the health test 'vSAN object data protection health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.objectdphealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.objectdphealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.objectdphealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.objectdphealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.objectdphealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-132',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:20.962337Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN Build Recommendation Engine Health'",
   systemName = 'alarm.vsan.health.test.vum',
   description = "Default alarm to monitor changes for the health group test 'vSAN Build Recommendation Engine Health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-133',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.05799Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Cluster health'",
   systemName = 'alarm.vsan.health.test.cluster',
   description = "Default alarm to monitor changes for the health group test 'Cluster health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-134',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.117732Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN disk balance'",
   systemName = 'alarm.vsan.health.test.cluster.diskbalance',
   description = "Default alarm to monitor changes from health test 'vSAN disk balance'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.diskbalance.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.diskbalance.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.diskbalance.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.diskbalance.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.diskbalance.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-135',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.177562Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Invalid unicast agent'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.hostwithinvalidunicastagent',
   description = "Default alarm to monitor changes for the health test 'Invalid unicast agent'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithinvalidunicastagent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithinvalidunicastagent.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithinvalidunicastagent.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithinvalidunicastagent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithinvalidunicastagent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-136',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.507489Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Data protection archival target accessibility check'",
   systemName = 'alarm.vsan.health.test.dataprotection.archivalaccessibility',
   description = "Default alarm to monitor changes for the health test 'vSAN Data protection archival target accessibility check'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.archivalaccessibility.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.archivalaccessibility.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.archivalaccessibility.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.archivalaccessibility.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.archivalaccessibility.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-137',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.674487Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Witness host within vCenter cluster'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.witnessinsidevccluster',
   description = "Default alarm to monitor changes for the health test 'Witness host within vCenter cluster'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessinsidevccluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessinsidevccluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessinsidevccluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessinsidevccluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessinsidevccluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-138',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.76515Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN Build Recommendation Engine Health' configuration issues",
   systemName = 'alarm.vsan.health.test.vum.vumconfig',
   description = "Default alarm to monitor changes for the health group test 'vSAN Build Recommendation Engine' configuration issues",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-139',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.812634Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Cannot connect to storage',
   systemName = 'alarm.StorageConnectivityAlarm',
   description = 'Default alarm to monitor host connectivity to storage device',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.storage.connectivity.lost',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.storage.redundancy.lost',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.storage.redundancy.degraded',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.problem.vmfs.nfs.server.disconnect',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-14',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.928759Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Stats master election'",
   systemName = 'alarm.vsan.health.test.perfsvc.masterexist',
   description = "Default alarm to monitor changes for the health test 'Checks stats master of vSAN Performance Service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.masterexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.masterexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.masterexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.masterexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.masterexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-140',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.872679Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Network adapter firmware is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.pnicfirmware',
   description = "Default alarm to monitor changes for the health test 'Network adapter firmware is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-141',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:21.944658Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Witness host fault domain misconfigured'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.witnessfaultdomaininvalid',
   description = "Default alarm to monitor changes for the health test 'Witness host fault domain misconfigured'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnessfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-142',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.004574Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Controller with pass-through and RAID disks'",
   systemName = 'alarm.vsan.health.test.hcl.mixedmode',
   description = "Default alarm to monitor changes for the online health test 'Controller with pass-through and RAID disks'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-143',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.093898Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Customer Experience Improvement Program (CEIP)'",
   systemName = 'alarm.vsan.health.test.cloudhealth.vsancloudhealthceipexception',
   description = "Default alarm to monitor changes for online health check 'Customer Experience Improvement Program (CEIP)'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthceipexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthceipexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthceipexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthceipexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthceipexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-144',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.15451Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Physical network adapter speed consistency'",
   systemName = 'alarm.vsan.health.test.network.pnicconsistent',
   description = "Default alarm to monitor changes for the online health test 'Physical network adapter speed consistency'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-145',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.214629Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Time is not synchronized across hosts and VC",
   systemName = 'alarm.vsan.health.test.cluster.timedrift',
   description = "Default alarm to monitor changes for the health test 'Time is synchronized across hosts and VC'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.timedrift.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.timedrift.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.timedrift.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.timedrift.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.timedrift.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-146',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.268411Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VDS compliance check for hyperconverged cluster configuration',
   systemName = 'alarm.vsan.health.test.hcicluster.dvshciconfig',
   description = "Default alarm to monitor changes for the health test 'VDS compliance check for hyperconverged cluster configuration'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.dvshciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.dvshciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.dvshciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.dvshciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.dvshciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-147',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.32826Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Unexpected number of fault domains'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.clusterwithouttwodatafaultdomains',
   description = "Default alarm to monitor changes for the health test 'Unexpected number of fault domains'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithouttwodatafaultdomains.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithouttwodatafaultdomains.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithouttwodatafaultdomains.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithouttwodatafaultdomains.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithouttwodatafaultdomains.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-148',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.390502Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN HCL DB up-to-date'",
   systemName = 'alarm.vsan.health.test.hcl.hcldbuptodate',
   description = "Default alarm to monitor changes for the health test 'vSAN HCL DB up-to-date'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hcldbuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hcldbuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hcldbuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hcldbuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hcldbuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-149',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.46011Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Migration error',
   systemName = 'alarm.MigrationErrorAlarm',
   description = 'Default alarm to monitor if a virtual machine cannot migrate, relocate, or is orphaned',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmFailedMigrateEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.MigrationErrorEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.MigrationHostErrorEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmRelocateFailedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmOrphanedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-15',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.007249Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm for 'vSAN firmware recommendation'",
   systemName = 'alarm.vsan.health.test.hcl.fwrecommendation',
   description = "Default alarm to monitor recommendation from 'vSAN firmware recommendation'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.fwrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.fwrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.fwrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.fwrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.fwrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-150',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.526042Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Host Maintenance Mode and Decommission State'",
   systemName = 'alarm.vsan.health.test.cluster.mmdecominsync',
   description = "Default alarm to monitor changes for the health test 'Host Maintenance Mode and Decommission State'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.mmdecominsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.mmdecominsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.mmdecominsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.mmdecominsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.mmdecominsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-151',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.592021Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Physical disk component limit health'",
   systemName = 'alarm.vsan.health.test.physicaldisks.physdiskcomplimithealth',
   description = "Default alarm to monitor changes for the health test 'Physical disk component limit health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcomplimithealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcomplimithealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcomplimithealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcomplimithealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcomplimithealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-152',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.651694Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Physical disk health'",
   systemName = 'alarm.vsan.health.test.physicaldisks',
   description = "Default alarm to monitor changes for the health group test 'Physical disk health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-153',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.711346Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN DPD liveness'",
   systemName = 'alarm.vsan.health.test.dataprotection.dpdliveness',
   description = "Default alarm to monitor changes for the data protection health test 'vSAN DPD liveness'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-154',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.765115Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN cluster configuration consistency'",
   systemName = 'alarm.vsan.health.test.cluster.consistentconfig',
   description = "Default alarm to monitor changes for the health test 'vSAN cluster configuration consistency'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.consistentconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.consistentconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.consistentconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.consistentconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.consistentconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-155',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.836997Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Performance data collection'",
   systemName = 'alarm.vsan.health.test.perfsvc.collection',
   description = "Default alarm to monitor changes for the health test 'Checks statistics collection of vSAN Performance Service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.collection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.collection.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.collection.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.collection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.collection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-156',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.897221Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Disk capacity'",
   systemName = 'alarm.vsan.health.test.physicaldisks.physdiskcapacity',
   description = "Default alarm to monitor changes for the health test 'Disk capacity'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcapacity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcapacity.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcapacity.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcapacity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcapacity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-157',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:22.951158Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN and VMFS datastores on a Dell H730 controller with the lsi_mr3 driver'",
   systemName = 'alarm.vsan.health.test.hcl.mixedmodeh730',
   description = "Default alarm to monitor changes for the online health test 'vSAN and VMFS datastores on a Dell H730 controller with the lsi_mr3 driver'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-158',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.006508Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Operation health'",
   systemName = 'alarm.vsan.health.test.physicaldisks.physdiskoverall',
   description = "Default alarm to monitor changes for the health test 'Operation health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskoverall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskoverall.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskoverall.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskoverall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskoverall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-159',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.071096Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Exit standby error',
   systemName = 'alarm.ExitStandbyErrorAlarm',
   description = 'Default alarm to monitor if a host cannot exit standby mode',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.ExitStandbyModeFailedEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.DrsExitStandbyModeFailedEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-16',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.057578Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN data protection service configuration in sync'",
   systemName = 'alarm.vsan.health.test.dataprotection.dpcfgsync',
   description = "Default alarm to monitor changes for the health test 'vSAN data protection service configuration in sync'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dpcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-160',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.142941Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Active multicast connectivity check'",
   systemName = 'alarm.vsan.health.test.network.multicastdeepdive',
   description = "Default alarm to monitor changes for the health test 'Active multicast connectivity check'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastdeepdive.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastdeepdive.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastdeepdive.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastdeepdive.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastdeepdive.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-161',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.196723Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Network health'",
   systemName = 'alarm.vsan.health.test.network',
   description = "Default alarm to monitor changes for the health group test 'Network health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-162',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.24493Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host compliance check for hyperconverged cluster configuration',
   systemName = 'alarm.vsan.health.test.hcicluster.hosthciconfig',
   description = "Default alarm to monitor changes for the health test 'Host compliance check for hyperconverged cluster configuration'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.hosthciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.hosthciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.hosthciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.hosthciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcicluster.hosthciconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-163',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.293232Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Advanced vSAN configuration in sync'",
   systemName = 'alarm.vsan.health.test.cluster.advcfgsync',
   description = "Default alarm to monitor changes for the health test 'Advanced vSAN configuration in sync'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.advcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.advcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.advcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.advcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.advcfgsync.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-164',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.353095Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Network latency check'",
   systemName = 'alarm.vsan.health.test.network.hostlatencycheck',
   description = "Default alarm to monitor changes for the health test 'Network latency check'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostlatencycheck.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostlatencycheck.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostlatencycheck.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostlatencycheck.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostlatencycheck.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-165',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.400899Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Verbose mode'",
   systemName = 'alarm.vsan.health.test.perfsvc.verbosemode',
   description = "Default alarm to monitor changes for the health test 'Checks the verbose mode status of the vSAN performance service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.verbosemode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.verbosemode.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.verbosemode.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.verbosemode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.verbosemode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-166',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.449055Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'After 1 additional host failure'",
   systemName = 'alarm.vsan.health.test.limits.limit1hf',
   description = "Default alarm to monitor changes for the health test 'After 1 additional host failure'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit1hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit1hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit1hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit1hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit1hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-167',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.508855Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Host component limit'",
   systemName = 'alarm.vsan.health.test.limits.nodecomponentlimit',
   description = "Default alarm to monitor changes for the health test 'Host component limit'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.nodecomponentlimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.nodecomponentlimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.nodecomponentlimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.nodecomponentlimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.nodecomponentlimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-168',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.568911Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Controller is VMware certified for ESXi release'",
   systemName = 'alarm.vsan.health.test.hcl.controllerreleasesupport',
   description = "Default alarm to monitor changes for the health test 'Controller is VMware certified for ESXi release'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-169',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.629208Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'License error',
   systemName = 'alarm.LicenseError',
   description = 'Default alarm to monitor license errors',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VMotionLicenseExpiredEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HostLicenseExpiredEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.ServerLicenseExpiredEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.LicenseExpiredEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.LicenseServerUnavailableEvent,
            eventTypeId = <unset>,
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-17',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.104331Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Space efficiency usage health'",
   systemName = 'alarm.vsan.health.test.cluster.physdiskdedupusage',
   description = "Default alarm to monitor changes for the health test 'Space efficiency usage health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-170',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.718501Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Hosts with connectivity issues'",
   systemName = 'alarm.vsan.health.test.network.hostconnectivity',
   description = "Default alarm to monitor changes for the health test 'Hosts with connectivity issues'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-171',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.778303Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSphere cluster members do not match vSAN cluster members'",
   systemName = 'alarm.vsan.health.test.cluster.clustermembership',
   description = "Default alarm to monitor changes for the health test 'vSphere cluster members match vSAN cluster members'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clustermembership.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clustermembership.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clustermembership.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clustermembership.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clustermembership.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-172',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.826329Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Stretched cluster health'",
   systemName = 'alarm.vsan.health.test.stretchedcluster',
   description = "Default alarm to monitor changes for the health group test 'Stretched cluster health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-173',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.880012Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Service runtime status'",
   systemName = 'alarm.vsan.health.test.iscsi.iscsiservicerunningtest',
   description = "Default alarm to monitor changes for the health test 'Service runtime status of iSCSI target service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicerunningtest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicerunningtest.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicerunningtest.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicerunningtest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicerunningtest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-174',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:23.933753Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN release catalog up-to-date'",
   systemName = 'alarm.vsan.health.test.vum.releasecataloguptodate',
   description = "Default alarm to monitor changes for the health group test 'vSAN release catalog up-to-date'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.releasecataloguptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.releasecataloguptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.releasecataloguptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.releasecataloguptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.releasecataloguptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-175',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.012053Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Hosts disconnected from VC'",
   systemName = 'alarm.vsan.health.test.network.hostdisconnected',
   description = "Default alarm to monitor changes for the health test 'Hosts disconnected from VC'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostdisconnected.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostdisconnected.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostdisconnected.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostdisconnected.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.hostdisconnected.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-176',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.09554Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN datastore usage threshold check'",
   systemName = 'alarm.vsan.health.test.dataprotection.datastoreusage',
   description = "Default alarm to monitor changes for the data protection health test 'vSAN datastore usage threshold check'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.datastoreusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.datastoreusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.datastoreusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.datastoreusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.datastoreusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-177',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.29364Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Preferred fault domain unset'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.witnesspreferredfaultdomainnotexist',
   description = "Default alarm to monitor changes for the health test 'Preferred fault domain unset'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomainnotexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomainnotexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomainnotexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomainnotexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomainnotexist.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-178',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.377163Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Invalid preferred fault domain on witness host'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.witnesspreferredfaultdomaininvalid',
   description = "Default alarm to monitor changes for the health test 'Invalid preferred fault domain on witness host'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesspreferredfaultdomaininvalid.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-179',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.467232Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Health status changed alarm',
   systemName = 'alarm.HealthStatusChangedAlarm',
   description = 'Default alarm to monitor changes to service and extension health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = <unset>,
            objectType = <unset>,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-18',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.17224Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSAN hardware compatibility issues',
   systemName = 'alarm.vsan.health.test.vsanhardwarecert',
   description = 'Default alarm to monitor changes for the health tests related to vSAN hardware compatibility',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vsanhardwarecert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vsanhardwarecert.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vsanhardwarecert.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vsanhardwarecert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vsanhardwarecert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-180',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.562995Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN CLOMD liveness'",
   systemName = 'alarm.vsan.health.test.cluster.clomdliveness',
   description = "Default alarm to monitor changes for the health test 'vSAN CLOMD liveness'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clomdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clomdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clomdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clomdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.clomdliveness.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-181',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.61658Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN Health Service up-to-date'",
   systemName = 'alarm.vsan.health.test.cluster.healthversion',
   description = "Default alarm to monitor changes for the health test 'vSAN Health Service up-to-date'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healthversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healthversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healthversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healthversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healthversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-182',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.676586Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm for vMotion 'Basic (unicast) connectivity check (normal ping)'",
   systemName = 'alarm.vsan.health.test.network.vmotionpingsmall',
   description = "Default alarm for vMotion to monitor changes for the health test 'Basic (unicast) connectivity check (normal ping)'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpingsmall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpingsmall.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpingsmall.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpingsmall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpingsmall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-183',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.724872Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSAN health alarms are suppressed',
   systemName = 'alarm.vsan.health.test.hciskip',
   description = 'vSAN health alarms are suppressed until the cluster is fully configured or this Quickstart workflow is skipped.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hciskip.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hciskip.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hciskip.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hciskip.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hciskip.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-184',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.772705Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Software version compatibility'",
   systemName = 'alarm.vsan.health.test.cluster.upgradesoftware',
   description = "Default alarm to monitor changes for the health test 'Software version compatibility'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradesoftware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradesoftware.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradesoftware.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradesoftware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradesoftware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-185',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.826579Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Performance service status'",
   systemName = 'alarm.vsan.health.test.perfsvc.perfsvcstatus',
   description = "Default alarm to monitor changes for the health test 'Checks status of vSAN Performance service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.perfsvcstatus.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.perfsvcstatus.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.perfsvcstatus.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.perfsvcstatus.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.perfsvcstatus.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-186',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:24.988019Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Network configuration'",
   systemName = 'alarm.vsan.health.test.iscsi.iscsiservicenetworktest',
   description = "Default alarm to monitor changes for the health test 'Network configuration of iSCSI target service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicenetworktest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicenetworktest.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicenetworktest.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicenetworktest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsiservicenetworktest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-187',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.281441Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN object health'",
   systemName = 'alarm.vsan.health.test.data.objecthealth',
   description = "Default alarm to monitor changes for the health test 'vSAN object health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.objecthealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.objecthealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.objecthealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.objecthealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.objecthealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-188',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.419199Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Data protection service version check'",
   systemName = 'alarm.vsan.health.test.dataprotection.dataprotectionversion',
   description = "Default alarm to monitor changes for the health test 'Data protection service version check'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dataprotectionversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dataprotectionversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dataprotectionversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dataprotectionversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.dataprotectionversion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-189',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.466837Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual machine Fault Tolerance state changed',
   systemName = 'alarm.VmFaultToleranceStateChangedAlarm',
   description = 'Default alarm to monitor changes in the Fault Tolerance state of a virtual machine',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newState',
                  operator = 'equals',
                  value = 'needSecondary'
               }
            ],
            eventType = vim.event.VmFaultToleranceStateChangedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newState',
                  operator = 'equals',
                  value = 'disabled'
               }
            ],
            eventType = vim.event.VmFaultToleranceStateChangedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newState',
                  operator = 'equals',
                  value = 'notConfigured'
               }
            ],
            eventType = vim.event.VmFaultToleranceStateChangedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newState',
                  operator = 'equals',
                  value = 'enabled'
               }
            ],
            eventType = vim.event.VmFaultToleranceStateChangedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newState',
                  operator = 'equals',
                  value = 'running'
               }
            ],
            eventType = vim.event.VmFaultToleranceStateChangedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-19',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.230573Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN extended configuration in sync'",
   systemName = 'alarm.vsan.health.test.cluster.extendedconfig',
   description = "Default alarm to monitor changes for the health test 'vSAN extended configuration in sync'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.extendedconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.extendedconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.extendedconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.extendedconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.extendedconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-190',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.557166Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'RAID controller configuration'",
   systemName = 'alarm.vsan.health.test.hcl.controllercacheconfig',
   description = "Default alarm to monitor changes for the online health test 'RAID controller configuration'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-191',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.652789Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN configuration for LSI-3108 based controller'",
   systemName = 'alarm.vsan.health.test.hcl.h730',
   description = "Default alarm to monitor changes for the online health test 'vSAN configuration for LSI-3108 based controller''",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-192',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.75468Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Controller firmware is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.controllerfirmware',
   description = "Default alarm to monitor changes for the health test 'Controller firmware is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerfirmware.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-193',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.844482Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSAN health service alarm for Overall Health Summary',
   systemName = 'alarm.vsan.health.test.overallsummary',
   description = 'Default alarm to monitor changes for the overall health summary',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.overallsummary.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.overallsummary.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.overallsummary.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.overallsummary.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.overallsummary.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-194',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.898056Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Network adapter is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.pniconhcl',
   description = "Default alarm to monitor changes for the health test 'Network adapter is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pniconhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pniconhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pniconhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pniconhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pniconhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-195',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:25.975972Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN HCL DB Auto Update'",
   systemName = 'alarm.vsan.health.test.hcl.autohclupdate',
   description = "Default alarm to monitor changes for the health test 'vSAN HCL DB Auto Update'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.autohclupdate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.autohclupdate.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.autohclupdate.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.autohclupdate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.autohclupdate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-196',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.029712Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN VM health'",
   systemName = 'alarm.vsan.health.test.data.vmhealth',
   description = "Default alarm to monitor changes for the health test 'vSAN VM health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.vmhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.vmhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.vmhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.vmhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.vmhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-197',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.113952Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Network adapter driver is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.pnicdriver',
   description = "Default alarm to monitor changes for the health test 'Network adapter driver is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-198',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.209947Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Resync operations throttling'",
   systemName = 'alarm.vsan.health.test.cluster.resynclimit',
   description = "Default alarm to monitor changes for the health test 'Resync operations throttling'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.resynclimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.resynclimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.resynclimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.resynclimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.resynclimit.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-199',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.401061Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual Machine Fault Tolerance vLockStep interval Status Changed',
   systemName = 'alarm.VmFaultToleranceLatencyStatusAlarm',
   description = 'Default Alarm to monitor changes in the Fault Tolerance Secondary vLockStep interval',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.StateAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isEqual',
            type = vim.VirtualMachine,
            statePath = u'summary.quickStats.ftLatencyStatus',
            yellow = 'yellow',
            red = 'red'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-2',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.3347Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Network connectivity lost',
   systemName = 'alarm.NetworkConnectivityLostAlarm',
   description = 'Default alarm to monitor network connectivity on a virtual switch',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.net.connectivity.lost',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.clear.net.connectivity.restored',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.problem.net.dvport.connectivity.lost',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.clear.net.dvport.connectivity.restored',
            objectType = vim.HostSystem,
            status = 'green'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-20',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.286635Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Data health'",
   systemName = 'alarm.vsan.health.test.data',
   description = "Default alarm to monitor changes for the health group test 'Data health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.data.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-200',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.502329Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Advanced vSAN configuration supported'",
   systemName = 'alarm.vsan.health.test.cluster.unsupportedadvparameters',
   description = "Default alarm to monitor changes for the online health test 'Advanced vSAN configuration supported'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-201',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.551888Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Network adapter is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.pnichcl',
   description = "Default alarm to monitor changes for the online health test 'Network adapter is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-202',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.599006Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN HCL health'",
   systemName = 'alarm.vsan.health.test.hcl',
   description = "Default alarm to monitor changes for the health group test 'vSAN HCL health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-203',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.658867Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN Performance Service health'",
   systemName = 'alarm.vsan.health.test.perfsvc',
   description = "Default alarm to monitor changes for the health group test 'vSAN Performance Service health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-204',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.730056Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Host issues retrieving hardware info'",
   systemName = 'alarm.vsan.health.test.hcl.hclhostbadstate',
   description = "Default alarm to monitor changes for the health test 'Host issues retrieving hardware info'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hclhostbadstate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hclhostbadstate.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hclhostbadstate.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hclhostbadstate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.hclhostbadstate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-205',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.78494Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Coredump partition size check'",
   systemName = 'alarm.vsan.health.test.cluster.coredumpartitionsize',
   description = "Default alarm to monitor changes for the online health test 'Coredump partition size check'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-206',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.856706Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN max component size'",
   systemName = 'alarm.vsan.health.test.physicaldisks.smalldiskstest',
   description = "Default alarm to monitor changes for the online health test 'vSAN max component size'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-207',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.928471Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'CPU AES-NI is disabled on hosts'",
   systemName = 'alarm.vsan.health.test.encryption.hostcpuaesni',
   description = "Default alarm to monitor changes for the health test 'CPU AES-NI is enabled on hosts'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.hostcpuaesni.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.hostcpuaesni.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.hostcpuaesni.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.hostcpuaesni.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.hostcpuaesni.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-208',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:26.976824Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Disk format version'",
   systemName = 'alarm.vsan.health.test.cluster.upgradelowerhosts',
   description = "Default alarm to monitor changes for the health test 'Disk format version'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradelowerhosts.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradelowerhosts.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradelowerhosts.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradelowerhosts.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.upgradelowerhosts.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-209',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.030264Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Network uplink redundancy lost',
   systemName = 'alarm.NetworkRedundancyLostAlarm',
   description = 'Default alarm to monitor loss of network uplink redundancy on a virtual switch',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.net.redundancy.lost',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.clear.net.redundancy.restored',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.problem.net.dvport.redundancy.lost',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.clear.net.dvport.redundancy.restored',
            objectType = vim.HostSystem,
            status = 'green'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-21',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.332215Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Unicast agent configuration inconsistent'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.clusterwithmultipleunicastagents',
   description = "Default alarm to monitor changes for the health test 'Unicast agent configuration inconsistent'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithmultipleunicastagents.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithmultipleunicastagents.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithmultipleunicastagents.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithmultipleunicastagents.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithmultipleunicastagents.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-210',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.084351Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'All hosts have a vSAN vmknic configured'",
   systemName = 'alarm.vsan.health.test.network.vsanvmknic',
   description = "Default alarm to monitor changes for the health test 'All hosts have a vSAN vmknic configured'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vsanvmknic.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vsanvmknic.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vsanvmknic.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vsanvmknic.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vsanvmknic.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-211',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.132246Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Site Latency Health'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.siteconnectivity',
   description = "Default alarm to monitor changes for the health test 'Site Latency Health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.siteconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.siteconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.siteconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.siteconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.siteconnectivity.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-212',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.185943Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vCenter or hosts are not connected to Key Management Servers'",
   systemName = 'alarm.vsan.health.test.encryption.kmsconnection',
   description = "Default alarm to monitor changes for the health test 'vCenter and all hosts are connected to Key Management Servers'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.kmsconnection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.kmsconnection.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.kmsconnection.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.kmsconnection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.encryption.kmsconnection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-213',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.24577Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'iSCSI target service'",
   systemName = 'alarm.vsan.health.test.iscsi',
   description = "Default alarm to monitor changes for the health group test 'iSCSI target service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-214',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.293705Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Congestion'",
   systemName = 'alarm.vsan.health.test.physicaldisks.physdiskcongestion',
   description = "Default alarm to monitor changes for the health test 'Congestion'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcongestion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcongestion.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcongestion.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcongestion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskcongestion.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-215',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.342218Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Memory pools (heaps)'",
   systemName = 'alarm.vsan.health.test.physicaldisks.lsomheap',
   description = "Default alarm to monitor changes for the health test 'Memory pools (heaps)'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomheap.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomheap.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomheap.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomheap.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomheap.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-216',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.396213Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Disks usage on storage controller'",
   systemName = 'alarm.vsan.health.test.physicaldisks.diskusage',
   description = "Default alarm to monitor changes for the online health test 'Disks usage on storage controller'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-217',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.443705Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Stats DB object conflicts'",
   systemName = 'alarm.vsan.health.test.perfsvc.renameddirs',
   description = "Default alarm to monitor changes for the health test 'Checks stats DB object conflicts'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.renameddirs.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.renameddirs.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.renameddirs.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.renameddirs.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.renameddirs.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-218',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.503802Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Limits health'",
   systemName = 'alarm.vsan.health.test.limits',
   description = "Default alarm to monitor changes for the health group test 'Limits health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-219',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.551767Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Network uplink redundancy degraded',
   systemName = 'alarm.NetworkRedundancyDegradedAlarm',
   description = 'Default alarm to monitor network uplink redundancy degradation on a virtual switch',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.net.redundancy.degraded',
            objectType = vim.HostSystem,
            status = <unset>
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.problem.net.dvport.redundancy.degraded',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-22',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.412482Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Space efficiency configuration consistency'",
   systemName = 'alarm.vsan.health.test.cluster.physdiskdedupconfig',
   description = "Default alarm to monitor changes for the health test 'Space efficiency configuration consistency'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.physdiskdedupconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-220',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.599656Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Unsupported host version'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.hostwithnostretchedclustersupport',
   description = "Default alarm to monitor changes for the health test 'Unsupported host version'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithnostretchedclustersupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithnostretchedclustersupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithnostretchedclustersupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithnostretchedclustersupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostwithnostretchedclustersupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-221',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.65372Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Component metadata health'",
   systemName = 'alarm.vsan.health.test.physicaldisks.componentmetadata',
   description = "Default alarm to monitor changes for the health test 'Component metadata health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.componentmetadata.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.componentmetadata.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.componentmetadata.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.componentmetadata.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.componentmetadata.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-222',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.701553Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Home object'",
   systemName = 'alarm.vsan.health.test.iscsi.iscsihomeobjectstatustest',
   description = "Default alarm to monitor changes for the health test 'Home object of iSCSI target service'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsihomeobjectstatustest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsihomeobjectstatustest.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsihomeobjectstatustest.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsihomeobjectstatustest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.iscsi.iscsihomeobjectstatustest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-223',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.767498Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Physical disk health retrieval issues'",
   systemName = 'alarm.vsan.health.test.physicaldisks.physdiskhostissues',
   description = "Default alarm to monitor changes for the health test 'Physical disk health retrieval issues'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskhostissues.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskhostissues.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskhostissues.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskhostissues.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.physdiskhostissues.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-224',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.815492Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'All hosts have matching multicast settings'",
   systemName = 'alarm.vsan.health.test.network.multicastsettings',
   description = "Default alarm to monitor changes for the health test 'All hosts have matching multicast settings'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsettings.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsettings.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsettings.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsettings.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsettings.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-225',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.881331Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'Controller utility is installed on host'",
   systemName = 'alarm.vsan.health.test.hcl.vendortoolpresence',
   description = "Default alarm to monitor changes for the online health test 'Controller utility is installed on host'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-226',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.929209Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'SCSI controller is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.controlleronhcl',
   description = "Default alarm to monitor changes for the health test 'SCSI controller is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controlleronhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controlleronhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controlleronhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controlleronhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controlleronhcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-227',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:27.983059Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Online health connectivity'",
   systemName = 'alarm.vsan.health.test.cloudhealth.vsancloudhealthconnectionexception',
   description = "Default alarm to monitor changes for online health check 'Online health connectivity'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthconnectionexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthconnectionexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthconnectionexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthconnectionexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vsancloudhealthconnectionexception.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-228',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.067635Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'MTU check (ping with large packet size)'",
   systemName = 'alarm.vsan.health.test.network.largeping',
   description = "Default alarm to monitor changes for the health test 'MTU check (ping with large packet size)'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.largeping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.largeping.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.largeping.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.largeping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.largeping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-229',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.115533Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMKernel NIC not configured correctly',
   systemName = 'alarm.MigrateBindToVMKAlarm',
   description = 'Default alarm for incorrectly configured VMkernel NIC',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vprob.net.migrate.bindtovmk',
            objectType = vim.HostSystem,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-23',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.52192Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN cluster partition'",
   systemName = 'alarm.vsan.health.test.network.clusterpartition',
   description = "Default alarm to monitor changes for the health test 'vSAN cluster partition'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.clusterpartition.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.clusterpartition.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.clusterpartition.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.clusterpartition.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.clusterpartition.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-230',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.169487Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Network adapter is VMware certified for ESXi release'",
   systemName = 'alarm.vsan.health.test.hcl.pnicreleasesupport',
   description = "Default alarm to monitor changes for the health test 'Network adapter is VMware certified for ESXi release'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.pnicreleasesupport.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-231',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.217338Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Stats DB object'",
   systemName = 'alarm.vsan.health.test.perfsvc.statsdb',
   description = "Default alarm to monitor changes for the health test 'Checks status of vSAN Performance Service stats DB object'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.statsdb.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.statsdb.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.statsdb.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.statsdb.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.statsdb.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-232',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.277385Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm for 'Firmware provider health'",
   systemName = 'alarm.vsan.health.test.hcl.firmwareproviderhealth',
   description = "Default alarm to monitor'Firmware provider' config issues",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.firmwareproviderhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.firmwareproviderhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.firmwareproviderhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.firmwareproviderhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.firmwareproviderhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-233',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.325269Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Witness host not found'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.clusterwithoutonewitnesshost',
   description = "Default alarm to monitor changes for the health test 'Witness host not found'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithoutonewitnesshost.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithoutonewitnesshost.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithoutonewitnesshost.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithoutonewitnesshost.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.clusterwithoutonewitnesshost.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-234',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.385097Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN data protection health'",
   systemName = 'alarm.vsan.health.test.dataprotection',
   description = "Default alarm to monitor changes for the health test 'vSAN data protection health'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.dataprotection.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-235',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.445065Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'ESXi vSAN Health service installation'",
   systemName = 'alarm.vsan.health.test.cluster.healtheaminstall',
   description = "Default alarm to monitor changes for the health test 'ESXi vSAN Health service installation'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healtheaminstall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healtheaminstall.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healtheaminstall.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healtheaminstall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.healtheaminstall.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-236',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.492859Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vSAN Build Recommendation Engine build recommendation'",
   systemName = 'alarm.vsan.health.test.vum.vumrecommendation',
   description = "Default alarm to monitor changes for the health group test 'vSAN Build Recommendation Engine'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.vumrecommendation.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-237',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.552887Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Unicast agent not configured'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.hostunicastagentunset',
   description = "Default alarm to monitor changes for the health test 'Unicast agent not configured'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostunicastagentunset.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostunicastagentunset.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostunicastagentunset.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostunicastagentunset.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.hostunicastagentunset.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-238',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.606738Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Basic (unicast) connectivity check (normal ping)'",
   systemName = 'alarm.vsan.health.test.network.smallping',
   description = "Default alarm to monitor changes for the health test 'Basic (unicast) connectivity check (normal ping)'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.smallping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.smallping.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.smallping.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.smallping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.smallping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-239',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.671615Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Unmanaged workload detected on SIOC-enabled datastore',
   systemName = 'alarm.IormNonVIWorkloadAlarm',
   description = 'Default alarm that is triggered if an unmanaged I/O workload is detected on a SIOC-enabled datastore',
   enabled = false,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.NonVIWorkloadDetectedOnDatastoreEvent,
            eventTypeId = <unset>,
            objectType = vim.Datastore,
            status = 'red'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-24',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.598154Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'vCenter state is authoritative'",
   systemName = 'alarm.vsan.health.test.cluster.vcauthoritative',
   description = "Default alarm to monitor changes for the health test 'vCenter state is authoritative'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.vcauthoritative.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.vcauthoritative.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.vcauthoritative.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.vcauthoritative.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cluster.vcauthoritative.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-240',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.720899Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'No disk claimed on witness host'",
   systemName = 'alarm.vsan.health.test.stretchedcluster.witnesswithnodiskmapping',
   description = "Default alarm to monitor changes for the health test 'No disk claimed on witness host'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesswithnodiskmapping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesswithnodiskmapping.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesswithnodiskmapping.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesswithnodiskmapping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.stretchedcluster.witnesswithnodiskmapping.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-241',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.780702Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN Health Alarm 'vSAN Hosts with new patch available'",
   systemName = 'alarm.vsan.health.test.vum.patchalert',
   description = "Default alarm to monitor changes for the online health test 'vSAN Hosts with new patch available'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.vum.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-242',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.828698Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'All hosts contributing stats'",
   systemName = 'alarm.vsan.health.test.perfsvc.hostsmissing',
   description = "Default alarm to monitor changes for the health test 'Checks if all host are contributing performance stats'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.hostsmissing.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.hostsmissing.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.hostsmissing.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.hostsmissing.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.perfsvc.hostsmissing.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-243',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.876564Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Current cluster situation'",
   systemName = 'alarm.vsan.health.test.limits.limit0hf',
   description = "Default alarm to monitor changes for the health test 'Current cluster situation'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit0hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit0hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit0hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit0hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.limits.limit0hf.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-244',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.930499Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Controller driver is VMware certified'",
   systemName = 'alarm.vsan.health.test.hcl.controllerdriver',
   description = "Default alarm to monitor changes for the health test 'Controller driver is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.hcl.controllerdriver.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-245',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:28.978425Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Multicast assessment based on other checks'",
   systemName = 'alarm.vsan.health.test.network.multicastsuspected',
   description = "Default alarm to monitor changes for the health test 'Multicast assessment based on other checks'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsuspected.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsuspected.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsuspected.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsuspected.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.multicastsuspected.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-246',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:29.032513Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm 'Memory pools (slabs)'",
   systemName = 'alarm.vsan.health.test.physicaldisks.lsomslab',
   description = "Default alarm to monitor changes for the health test 'Memory pools (slabs)'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomslab.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomslab.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomslab.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomslab.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.physicaldisks.lsomslab.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-247',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:29.09232Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN health alarm for vMotion 'MTU check (ping with large packet size)'",
   systemName = 'alarm.vsan.health.test.network.vmotionpinglarge',
   description = "Default alarm for vMotion to monitor changes for the health test 'MTU check (ping with large packet size)'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpinglarge.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpinglarge.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpinglarge.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpinglarge.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.network.vmotionpinglarge.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-248',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:56:29.146209Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'vSAN Hosts with new patch available'",
   systemName = 'alarm.vsan.health.test.cloudhealth.patchalert',
   description = "Default alarm to monitor changes for the online health test 'vSAN Hosts with new patch available'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.patchalert.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-249',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.454378Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host IPMI System Event Log status',
   systemName = 'alarm.SELHealthAlarm',
   description = "Monitors the fullness of the IPMI System Event Log.  See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'SEL',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'SEL',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-25',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.639506Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'Disks usage on storage controller'",
   systemName = 'alarm.vsan.health.test.cloudhealth.diskusage',
   description = "Default alarm to monitor changes for the online health test 'Disks usage on storage controller'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.diskusage.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-250',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.502499Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'Advanced vSAN configuration supported'",
   systemName = 'alarm.vsan.health.test.cloudhealth.unsupportedadvparameters',
   description = "Default alarm to monitor changes for the online health test 'Advanced vSAN configuration supported'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.unsupportedadvparameters.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-251',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.550307Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSAN online health alarms',
   systemName = 'alarm.vsan.health.test.cloudhealth',
   description = 'This alarm is from vSAN online health, please check the vSAN online health group',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-252',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.598441Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'Coredump partition size check'",
   systemName = 'alarm.vsan.health.test.cloudhealth.coredumpartitionsize',
   description = "Default alarm to monitor changes for the online health test 'Coredump partition size check'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.coredumpartitionsize.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-253',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.646425Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'vSAN and VMFS datastores on a Dell H730 controller with the lsi_mr3 driver'",
   systemName = 'alarm.vsan.health.test.cloudhealth.mixedmodeh730',
   description = "Default alarm to monitor changes for the online health test 'vSAN and VMFS datastores on a Dell H730 controller with the lsi_mr3 driver'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmodeh730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-254',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.694259Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'Network adapter is VMware certified'",
   systemName = 'alarm.vsan.health.test.cloudhealth.pnichcl',
   description = "Default alarm to monitor changes for the online health test 'Network adapter is VMware certified'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnichcl.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-255',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.742019Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'Controller utility is installed on host'",
   systemName = 'alarm.vsan.health.test.cloudhealth.vendortoolpresence',
   description = "Default alarm to monitor changes for the online health test 'Controller utility is installed on host'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vendortoolpresence.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-256',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.790092Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'Controller with pass-through and RAID disks'",
   systemName = 'alarm.vsan.health.test.cloudhealth.mixedmode',
   description = "Default alarm to monitor changes for the online health test 'Controller with pass-through and RAID disks'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.mixedmode.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-257',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.837966Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'RAID controller configuration'",
   systemName = 'alarm.vsan.health.test.cloudhealth.controllercacheconfig',
   description = "Default alarm to monitor changes for the online health test 'RAID controller configuration'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.controllercacheconfig.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-258',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.892335Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'vSAN configuration for LSI-3108 based controller'",
   systemName = 'alarm.vsan.health.test.cloudhealth.h730',
   description = "Default alarm to monitor changes for the online health test 'vSAN configuration for LSI-3108 based controller''",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.h730.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-259',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:12.9578Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host Baseboard Management Controller status',
   systemName = 'alarm.BMCHealthAlarm',
   description = "Monitors the status of the Baseboard Management Controller. See the host's Hardware Status tab for more details.",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'BMC',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'BMC',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HardwareSensorGroupStatus',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-26',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:31.895227Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'vSAN max component size'",
   systemName = 'alarm.vsan.health.test.cloudhealth.smalldiskstest',
   description = "Default alarm to monitor changes for the online health test 'vSAN max component size'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.smalldiskstest.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-260',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:13.005665Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'vCenter Server up to date'",
   systemName = 'alarm.vsan.health.test.cloudhealth.vcuptodate',
   description = "Default alarm to monitor changes for the online health test 'vCenter Server up to date'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vcuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vcuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vcuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vcuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.vcuptodate.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-261',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:13.05367Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = "vSAN online health alarm 'Physical network adapter speed consistency'",
   systemName = 'alarm.vsan.health.test.cloudhealth.pnicconsistent',
   description = "Default alarm to monitor changes for the online health test 'Physical network adapter speed consistency'",
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'skipped'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'curstatus',
                  operator = 'equals',
                  value = 'info'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vsan.health.test.cloudhealth.pnicconsistent.event',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-262',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:57:13.113657Z,
   lastModifiedUser = 'com.vmware.vsan.health',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'SEAT Disk Exhaustion on 10',
   systemName = 'SEAT Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Stats, events, alarms, and tasks File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_seat'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_seat'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_seat'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-263',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:59:15.279074Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Core and Inventory Disk Exhaustion on 10',
   systemName = 'Core and Inventory Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Core and Inventory File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_db'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_db'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_db'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-264',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:59:20.588153Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Root Disk Exhaustion on 10',
   systemName = 'Root Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Root File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_root'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_root'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_root'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-265',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:59:25.945097Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Boot Disk Exhaustion on 10',
   systemName = 'Boot Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Boot File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_boot'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_boot'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_boot'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-266',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:59:31.283818Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Autodeploy Disk Exhaustion on 10',
   systemName = 'Autodeploy Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Autodeploy File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_autodeploy'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_autodeploy'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_autodeploy'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-267',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:59:36.741904Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Diagnostics Disk Exhaustion on 10',
   systemName = 'Diagnostics Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Diagnostics File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_core'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_core'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_core'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-268',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T14:09:15.868574Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Image Builder Disk Exhaustion on 10',
   systemName = 'Image Builder Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Image Builder File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_imagebuilder'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_imagebuilder'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_imagebuilder'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-269',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T14:09:21.29126Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'License user threshold monitoring',
   systemName = 'alarm.LicenseUserThresholdExceededAlarm',
   description = 'Default alarm to monitor if a user-defined license threshold is exceeded',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.LicenseUserThresholdExceededEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-27',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.029383Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Log Disk Exhaustion on 10',
   systemName = 'Log Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Log File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_log'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_log'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_log'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-270',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T14:09:26.713337Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'ESXi Dump Collector Disk Exhaustion on 10',
   systemName = 'ESXi Dump Collector Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere ESXi Dump Collector File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_netdump'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_netdump'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_netdump'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-271',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T14:09:32.286278Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Update Manager Disk Exhaustion on 10',
   systemName = 'Update Manager Disk Exhaustion on 10',
   description = 'Alarm that monitors vSphere Update Manager File System Resource Exhaustion. (10.10.10.64)',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_updatemgr'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_updatemgr'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'resourceName',
                  operator = 'equals',
                  value = 'storage_util_filesystem_updatemgr'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = '_sourcehost_',
                  operator = 'equals',
                  value = '10.10.10.64'
               }
            ],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.ResourceExhaustionStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.AlarmTriggeringAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.action.SendSNMPAction) {
         dynamicType = <unset>,
         dynamicProperty = (vmodl.DynamicProperty) []
      },
      transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [],
      green2yellow = true,
      yellow2red = true,
      red2yellow = true,
      yellow2green = true
   },
   actionFrequency = 0,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 0
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-272',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T14:09:37.830359Z,
   lastModifiedUser = 'VSPHERE.LOCAL\\machine-caed3d1b-aed6-4aa0-a585-85bf7d120285',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Thin-provisioned volume capacity threshold exceeded',
   systemName = 'alarm.ThinProvisionedLunAlarm',
   description = 'Default alarm that is triggered when the thin provisioning threshold on the storage array is exceeded for volume(s) backing the datastore',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.ThinProvisionedLunThresholdInitEvent',
                  objectType = vim.Datastore,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.ThinProvisionedLunThresholdClearedEvent',
                  objectType = vim.Datastore,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.ThinProvisionedLunThresholdCrossedEvent',
                  objectType = vim.Datastore,
                  status = 'red'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-28',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.112814Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Datastore capability alarm',
   systemName = 'alarm.LunCapabilityAlarm',
   description = 'Default alarm that is triggered when the capability status of volumes backing the datastore changes',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.LunCapabilityInitEvent',
                  objectType = vim.Datastore,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.LunCapabilityMetEvent',
                  objectType = vim.Datastore,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.LunCapabilityNotMetEvent',
                  objectType = vim.Datastore,
                  status = 'red'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-29',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.160344Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host CPU usage',
   systemName = 'alarm.HostCPUUsageAlarm',
   description = 'Default alarm to monitor host CPU usage',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.MetricAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isAbove',
            type = vim.HostSystem,
            metric = (vim.PerformanceManager.MetricId) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               counterId = 2,
               instance = ''
            },
            yellow = 7500,
            yellowInterval = 300,
            red = 9000,
            redInterval = 300
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-3',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.388202Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Storage DRS recommendation',
   systemName = 'alarm.StoragePodSDRSRecommendation',
   description = 'Alarm that monitors a Storage DRS recommendation',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.sdrs.StorageDrsNewRecommendationPendingEvent',
            objectType = vim.StoragePod,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.sdrs.StorageDrsRecommendationApplied',
            objectType = vim.StoragePod,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-30',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.220115Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Storage DRS is not supported on a host',
   systemName = 'alarm.StoragePodSDRSNotSupportedHost',
   description = 'Alarm that monitors and alerts when Storage DRS is not supported on a host',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.sdrs.StorageDrsNotSupportedHostConnectedToPodEvent',
            objectType = vim.StoragePod,
            status = 'red'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-31',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.259715Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Datastore is in multiple datacenters',
   systemName = 'alarm.DatastoreInMultipleDatacenters',
   description = 'Datastore in a datastore cluster is visible in more than one datacenter',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sdrs.DatastoreInMultipleDatacentersEvent',
                  objectType = vim.StoragePod,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sdrs.ClearDatastoreInMultipleDatacentersEvent',
                  objectType = vim.StoragePod,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-32',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.325792Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Datastore cluster is out of space',
   systemName = 'alarm.StoragePodOutOfSpace',
   description = 'Alarm that monitors when a datastore cluster is out of space',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.MetricAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isAbove',
            type = vim.StoragePod,
            metric = (vim.PerformanceManager.MetricId) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               counterId = 266,
               instance = ''
            },
            yellow = 7500,
            yellowInterval = <unset>,
            red = 8500,
            redInterval = <unset>
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-33',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.397929Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Insufficient vSphere HA failover resources',
   systemName = 'alarm.HAinsufficientFailoverResources',
   description = 'Default alarm to alert when there are insufficient cluster resources for vSphere HA to guarantee failover',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.InsufficientFailoverResourcesEvent,
            eventTypeId = <unset>,
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.FailoverLevelRestored,
            eventTypeId = <unset>,
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.DasDisabledEvent',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-34',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.435758Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere HA failover in progress',
   systemName = 'alarm.HAfailoverInProgress',
   description = 'Default alarm to alert when vSphere HA is in the process of failing over virtual machines',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.ClusterFailoverActionInitiatedEvent',
            objectType = vim.ClusterComputeResource,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.ClusterFailoverActionCompletedEvent',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.DasDisabledEvent',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-35',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.463154Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Cannot find vSphere HA master agent',
   systemName = 'alarm.HAcannotFindMaster',
   description = 'Default alarm to alert when vCenter Server has been unable to connect to a vSphere HA master agent for a prolonged period',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.VcCannotFindMasterEvent',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.VcCannotCommunicateWithMasterEvent',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.VcConnectedToMasterEvent',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.DasDisabledEvent',
            objectType = vim.ClusterComputeResource,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-36',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.541473Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere HA host status',
   systemName = 'alarm.HAhostStatus',
   description = 'Default alarm to monitor health of a host as reported by vSphere HA',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.HostAgentErrorEvent',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.DasHostIsolatedEvent',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.HostPartitionedFromMasterEvent',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.DasHostFailedEvent',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.HostNoHAEnabledPortGroupsEvent',
            objectType = vim.HostSystem,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.HostDasAgentHealthyEvent',
            objectType = vim.HostSystem,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'vim.event.HostDasDisabledEvent',
            objectType = vim.HostSystem,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-37',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.579447Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere HA virtual machine failover failed',
   systemName = 'alarm.HAfailoverFailed',
   description = 'Default alarm to alert when vSphere HA failed to failover a virtual machine',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.NotEnoughResourcesToStartVmEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.FailedRestartAfterIsolationEvent',
            objectType = vim.VirtualMachine,
            status = 'red'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmPoweredOnEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.ha.VmRestartedByHAEvent',
            objectType = vim.VirtualMachine,
            status = 'green'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-38',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.673192Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere HA virtual machine monitoring action',
   systemName = 'alarm.HAvmMonitoringAction',
   description = 'Default alarm to alert when vSphere HA reset a virtual machine',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmDasBeingResetWithScreenshotEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmDasBeingResetEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'yellow'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-39',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.715086Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host memory usage',
   systemName = 'alarm.HostMemoryUsageAlarm',
   description = 'Default alarm to monitor host memory usage',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.MetricAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isAbove',
            type = vim.HostSystem,
            metric = (vim.PerformanceManager.MetricId) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               counterId = 24,
               instance = ''
            },
            yellow = 9000,
            yellowInterval = 300,
            red = 9500,
            redInterval = 300
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-4',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.435587Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere HA virtual machine monitoring error',
   systemName = 'alarm.HAvmMonitoringError',
   description = 'Default alarm to alert when vSphere HA failed to reset a virtual machine',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmDasResetFailedEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-40',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.789343Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'License capacity monitoring',
   systemName = 'alarm.LicenseCapacityExceededAlarm',
   description = 'Default alarm to monitor if a license capacity is exceeded',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.LicenseCapacityExceededEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-41',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:32.834778Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'The host license edition is not compatible with the vCenter Server license edition',
   systemName = 'alarm.HostLicenseEditionNotAllowed',
   description = 'Default alarm to monitor if host license edition is not allowed',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.HostLicenseEditionNotAllowedEvent',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-42',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.046738Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere Distributed Switch VLAN trunked status',
   systemName = 'alarm.VdsHCVlanTrunkedAlarm',
   description = 'Default alarm to monitor changes in vSphere Distributed Switch VLAN trunked status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.UplinkPortVlanUntrunkedEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.UplinkPortVlanTrunkedEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-43',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.118805Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere Distributed Switch MTU matched status',
   systemName = 'alarm.VdsHCMTUMatchAlarm',
   description = 'Default alarm to monitor changes in vSphere Distributed Switch MTU matched status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.MtuMismatchEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.MtuMatchEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-44',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.154547Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere Distributed Switch MTU supported status',
   systemName = 'alarm.VdsHCMTUSupportedAlarm',
   description = 'Default alarm to monitor changes in vSphere Distributed Switch MTU supported status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.UplinkPortMtuNotSupportEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.UplinkPortMtuSupportEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-45',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.254222Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere Distributed Switch teaming matched status',
   systemName = 'alarm.VdsHCTeamingMatchAlarm',
   description = 'Default alarm to monitor changes in vSphere Distributed Switch teaming matched status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.TeamingMisMatchEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.TeamingMatchEvent,
                  eventTypeId = <unset>,
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-46',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.30397Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual machine Consolidation Needed status',
   systemName = 'alarm.VmDiskConsolidationNeededAlarm',
   description = 'Default alarm that is triggered when virtual machine Consolidation Needed status is set',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.VmDiskConsolidationNeeded',
                  objectType = vim.VirtualMachine,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.VmDiskConsolidationNoLongerNeeded',
                  objectType = vim.VirtualMachine,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-47',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.388133Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host virtual flash resource status',
   systemName = 'alarm.VFlashResourceHealthAlarm',
   description = 'Default alarm to monitor the VMware Flash Read Cache resource status on the host',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.host.problem.vFlashResource.inaccessible',
                  objectType = vim.HostSystem,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.host.clear.vFlashResource.inaccessible',
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-48',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.463364Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host virtual flash resource usage',
   systemName = 'alarm.VFlashResourceUsageAlarm',
   description = 'Default alarm to monitor the VMware Flash Read Cache resource usage on the host',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.host.problem.vFlashResource.reachthreshold',
                  objectType = vim.HostSystem,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.host.clear.vFlashResource.reachthreshold',
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-49',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.499057Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual machine CPU usage',
   systemName = 'alarm.VmCPUUsageAlarm',
   description = 'Default alarm to monitor virtual machine CPU usage',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.MetricAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isAbove',
            type = vim.VirtualMachine,
            metric = (vim.PerformanceManager.MetricId) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               counterId = 2,
               instance = ''
            },
            yellow = 7500,
            yellowInterval = 300,
            red = 9000,
            redInterval = 300
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-5',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.488216Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Registration/unregistration of a VASA vendor provider on a vSAN host fails',
   systemName = 'alarm.HostVendorProviderRegistrationAlarm',
   description = 'Default alarm that monitors whether the registration or unregistration of a VASA vendor provider on a vSAN host fails.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.vsan.HostVendorProviderRegistrationFailedEvent',
                  objectType = vim.HostSystem,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.vsan.HostVendorProviderDeregistrationFailedEvent',
                  objectType = vim.HostSystem,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.vsan.HostVendorProviderRegistrationSuccessEvent',
                  objectType = vim.HostSystem,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.vsan.HostVendorProviderDeregistrationSuccessEvent',
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-50',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.559955Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Expired vSAN license',
   systemName = 'alarm.VsanClusterLicenseExpiryAlarm',
   description = 'Default alarm for expired vSAN license or evaluation period.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.vsan.LicenseExpiryEvent',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-51',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.604063Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VM storage compliance alarm',
   systemName = 'alarm.VmStorageComplianceAlarm',
   description = 'Default alarm that is triggered when the virtual disk goes out of compliance with the object-based storage',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.vm.ComplianceStatusNonCompliantEvent',
                  objectType = vim.VirtualMachine,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.vm.ComplianceStatusCompliantEvent',
                  objectType = vim.VirtualMachine,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.vm.ComplianceStatusUnknownEvent',
                  objectType = vim.VirtualMachine,
                  status = 'gray'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-52',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.66896Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Datastore compliance alarm',
   systemName = 'alarm.DatastoreStorageComplianceAlarm',
   description = 'Default alarm that is triggered when the virtual disk on the datastore goes out of compliance with the object-based storage',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.datastore.ComplianceStatusNonCompliantEvent',
                  objectType = vim.Datastore,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.datastore.ComplianceStatusCompliantEvent',
                  objectType = vim.Datastore,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.datastore.ComplianceStatusUnknownEvent',
                  objectType = vim.Datastore,
                  status = 'gray'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-53',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.700885Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere HA VM Component Protection could not power off a virtual machine',
   systemName = 'alarm.VmcpTerminateVmAborted',
   description = 'Default alarm that is triggered when vSphere HA VM Component Protection cannot power off a virtual machine with an inaccessible datastore',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.HA.VmcpTerminateVmAborted',
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-54',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.836463Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Service Control Agent Health Alarm',
   systemName = 'alarm.ServiceControlAgentHealthAlarm',
   description = 'Alarm that is triggered when the Service Control Agent is not reachable.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-55',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.914517Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Identity Health Alarm',
   systemName = 'alarm.IdentityHealthAlarm',
   description = 'Identity service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'identity'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'identity'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'identity'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'identity'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-56',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:33.952167Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere Client Health Alarm',
   systemName = 'alarm.VsphereClientHealthAlarm',
   description = 'vSphere Client service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-client'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-client'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-client'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-client'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-57',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.054195Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'ESX Agent Manager Health Alarm',
   systemName = 'alarm.EAMHealthAlarm',
   description = 'ESX Agent Manager service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'eam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'eam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'eam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'eam'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-58',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.286247Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Message Bus Config Health Alarm',
   systemName = 'alarm.MsgBusHealthAlarm',
   description = 'Message Bus Config service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'mbcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'mbcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'mbcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'mbcs'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-59',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.47169Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual machine memory usage',
   systemName = 'alarm.VmMemoryUsageAlarm',
   description = 'Default alarm to monitor virtual machine memory usage',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.MetricAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isAbove',
            type = vim.VirtualMachine,
            metric = (vim.PerformanceManager.MetricId) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               counterId = 24,
               instance = ''
            },
            yellow = 8500,
            yellowInterval = 600,
            red = 9500,
            redInterval = 600
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-6',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.528438Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Cis License Health Alarm',
   systemName = 'alarm.LicenseHealthAlarm',
   description = 'Cis License service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cis-license'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cis-license'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cis-license'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'cis-license'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-60',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.563469Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Appliance Management Health Alarm',
   systemName = 'alarm.ApplmgmtHealthAlarm',
   description = 'Appliance Management service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'applmgmt'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'applmgmt'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'applmgmt'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'applmgmt'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-61',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.662437Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vCenter Server Health Alarm',
   systemName = 'alarm.VCServerHealthAlarm',
   description = 'vCenter Server service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vpxd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-63',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.808647Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Data Service Health Alarm',
   systemName = 'alarm.DSHealthAlarm',
   description = 'Data Service service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-dataservice-sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-dataservice-sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-dataservice-sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-dataservice-sca'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-64',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.862084Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'RBD Health Alarm',
   systemName = 'alarm.RBDHealthAlarm',
   description = 'RBD service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rbd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rbd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rbd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rbd'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-65',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:34.940468Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vService Manager Health Alarm',
   systemName = 'alarm.VSMHealthAlarm',
   description = 'vService Manager service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsm'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-66',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.057477Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Performance Charts Service Health Alarm',
   systemName = 'alarm.PerfchartsHealthAlarm',
   description = 'Performance Charts Service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'perfcharts'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'perfcharts'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'perfcharts'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'perfcharts'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-67',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.191945Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Content Library Service Health Alarm',
   systemName = 'alarm.ContentLibraryServiceHealthAlarm',
   description = 'Default alarm that monitors the health status of the VMware Content Library Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'content-library'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'content-library'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'content-library'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'content-library'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-68',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.297605Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Datastore usage on disk',
   systemName = 'alarm.DatastoreDiskUsageAlarm',
   description = 'Default alarm to monitor datastore disk usage',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.MetricAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            operator = 'isAbove',
            type = vim.Datastore,
            metric = (vim.PerformanceManager.MetricId) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               counterId = 266,
               instance = ''
            },
            yellow = 7500,
            yellowInterval = <unset>,
            red = 8500,
            redInterval = <unset>
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-7',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.580177Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMware vSphere ESXi Dump Collector Health Alarm',
   systemName = 'alarm.NetdumperHealthAlarm',
   description = 'Default alarm that monitors the health status of the VMware vSphere ESXi Dump Collector Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'netdumper'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'netdumper'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'netdumper'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'netdumper'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-70',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.467451Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMware vAPI Endpoint Service Health Alarm',
   systemName = 'alarm.VapiEndpointHealthAlarm',
   description = 'Default alarm that monitors the health status of the VMware vAPI Endpoint Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vapi-endpoint'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vapi-endpoint'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vapi-endpoint'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vapi-endpoint'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-71',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.521415Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMware vSphere Profile-Driven Storage Service Health Alarm',
   systemName = 'alarm.SpsHealthAlarm',
   description = 'Default alarm that monitors the health status of the VMware vSphere Profile-Driven Storage Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'sps'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-73',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.652674Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'PostgreSQL Service Health Alarm',
   systemName = 'alarm.VmwareVpostgresHealthAlarm',
   description = 'Default alarm that monitors the health status of the PostgreSQL Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-vpostgres'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-vpostgres'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-vpostgres'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vmware-vpostgres'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-75',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.774882Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere vCenter Host Certificate Management Mode',
   systemName = 'alarm.HostCertManagementModeChangedAlarm',
   description = 'Alarm to monitor changes in the certificate management mode of vCenter Server',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.certmgr.HostCertManagementModeChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-76',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.819346Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'ESXi Host Certificate Status',
   systemName = 'alarm.HostCertStatusAlarm',
   description = 'Alarm to indicate certificate status of an ESXi host',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.certmgr.HostCertExpirationImminentEvent',
                  objectType = vim.HostSystem,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.certmgr.HostCertUpdatedEvent',
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-77',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.86099Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Certificate Status',
   systemName = 'alarm.CertificateStatusAlarm',
   description = 'Default alarm that monitors whether a certificate is getting close to its expiration date.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.vecs.CertExpirationEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-78',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.890984Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VASA provider disconnected',
   systemName = 'alarm.VasaProviderDisconnectedAlarm',
   description = 'Default alarm that is triggered when a VASA provider is in a disconnected state',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.VasaProviderConnectedEvent',
                  objectType = vim.Datastore,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.VasaProviderDisconnectedEvent',
                  objectType = vim.Datastore,
                  status = 'red'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-79',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.942205Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'License inventory monitoring',
   systemName = 'alarm.LicenseNonComplianceAlarm',
   description = 'Default alarm to monitor if license inventory is not compliant',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.LicenseNonComplianceEvent,
            eventTypeId = <unset>,
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-8',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.621533Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VASA Provider certificate expiration alarm',
   systemName = 'alarm.VasaProviderCertificateExpiryAlarm',
   description = 'Default alarm that is triggered when a VASA Provider certificate is about to expire',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.VasaProviderCertificateValidEvent',
                  objectType = vim.Datastore,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.VasaProviderCertificateSoftLimitReachedEvent',
                  objectType = vim.Datastore,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.VasaProviderCertificateHardLimitReachedEvent',
                  objectType = vim.Datastore,
                  status = 'red'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-80',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:35.986666Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Virtual Machine network adapter reservation status',
   systemName = 'alarm.VmAdapterResvervationStatus',
   description = 'Default alarm to monitor changes in the reservation status of a virtual machine network adapter',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.vm.VmAdapterResvNotSatisfiedEvent',
                  objectType = vim.VirtualMachine,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.vm.VmAdapterResvSatisfiedEvent',
                  objectType = vim.VirtualMachine,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-81',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.026297Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Errors occurred on the disk(s) of a vSAN host',
   systemName = 'alarm.VsanHostDiskErrorAlarm',
   description = 'Default alarm that monitors whether there are errors on the host disk(s) in the vSAN cluster.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'esx.problem.vob.vsan.lsom.diskerror',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-82',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.118716Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Refreshing CA certificates and CRLs for a VASA provider failed',
   systemName = 'alarm.VasaProviderRefreshCACertsAndCRLsFailureAlarm',
   description = 'Default alarm that monitors whether the refreshing of CA certificates and CRLs for some of the VASA providers has failed.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.VasaProviderRefreshCACertsAndCRLsSuccess',
                  objectType = <unset>,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.VasaProviderRefreshCACertsAndCRLsFailure',
                  objectType = <unset>,
                  status = 'red'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-83',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.172758Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Object type storage alarm',
   systemName = 'alarm.VasaProviderObjectAlarm',
   description = 'Default alarm that is triggered when a VASA provider raises an Object type alarm on an entity backing the datastore',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.ObjectTypeAlarmErrorEvent',
                  objectType = vim.Datastore,
                  status = 'red'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.ObjectTypeAlarmClearedEvent',
                  objectType = vim.Datastore,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.sms.ObjectTypeAlarmWarningEvent',
                  objectType = vim.Datastore,
                  status = 'yellow'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-84',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.229997Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Registration/unregistration of third-party IO filter storage providers fails on a host',
   systemName = 'alarm.IoFilterHostVendorProviderRegistrationAlarm',
   description = 'Default alarm that monitors whether vCenter Server fails to register or unregister third-party IO filter storage providers on a host.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.iofilter.HostVendorProviderRegistrationFailedEvent',
                  objectType = vim.HostSystem,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.iofilter.HostVendorProviderUnregistrationFailedEvent',
                  objectType = vim.HostSystem,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.iofilter.HostVendorProviderRegistrationSuccessEvent',
                  objectType = vim.HostSystem,
                  status = 'green'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.iofilter.HostVendorProviderUnregistrationSuccessEvent',
                  objectType = vim.HostSystem,
                  status = 'green'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-85',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.283886Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere APIs for IO Filtering (VAIO) Filter Management Operations',
   systemName = 'alarm.IoFilterManagementOperationAlarm',
   description = 'Default alarm that is triggered when vSphere APIs for IO Filtering (VAIO) operations (installing/uninstalling/upgrading filters) fail for some hosts in the cluster',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.OrAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            expression = (vim.alarm.AlarmExpression) [
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.iofilter.FilterInstallationFailedEvent',
                  objectType = vim.ClusterComputeResource,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.iofilter.FilterUninstallationFailedEvent',
                  objectType = vim.ClusterComputeResource,
                  status = 'yellow'
               },
               (vim.alarm.EventAlarmExpression) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
                  eventType = vim.event.EventEx,
                  eventTypeId = 'com.vmware.vc.iofilter.FilterUpgradeFailedEvent',
                  objectType = vim.ClusterComputeResource,
                  status = 'yellow'
               }
            ]
         }
      ]
   },
   action = <unset>,
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-86',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.353248Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Expired vCenter Server license',
   systemName = 'alarm.LicenseExpiredVc',
   description = 'Default alarm to monitor for expired vCenter Server license or evaluation period.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.VcLicenseExpiredEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-87',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.391786Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Expired host license',
   systemName = 'alarm.LicenseExpiredHost',
   description = 'Default alarm to monitor for expired host license or evaluation period.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.HostLicenseExpiredEvent',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-88',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.48151Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Expired vCenter Server time-limited license',
   systemName = 'alarm.SubscriptionLicenseExpiredVc',
   description = 'Default alarm to monitor for expired vCenter Server time-limited license.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.VcSubscriptionLicenseExpiredEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-89',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.531949Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Timed out starting Secondary VM',
   systemName = 'alarm.VmTimedoutStartingSecondaryAlarm',
   description = 'Default alarm to monitor time-outs when starting a Secondary VM',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.VmTimedoutStartingSecondaryEvent,
            eventTypeId = <unset>,
            objectType = vim.VirtualMachine,
            status = <unset>
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-9',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:30.663447Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Expired host time-limited license',
   systemName = 'alarm.SubscriptionLicenseExpiredHost',
   description = 'Default alarm to monitor for expired host time-limited license.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.HostSubscriptionLicenseExpiredEvent',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-90',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.579815Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Expired vSAN time-limited license',
   systemName = 'alarm.SubscriptionLicenseExpiredVsan',
   description = 'Default alarm to monitor for expired vSAN time-limited license.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.license.vsan.SubscriptionLicenseExpiredEvent',
            objectType = vim.ClusterComputeResource,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = 7200,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-91',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.633689Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Database Health Alarm',
   systemName = 'alarm.DBHealthAlarm',
   description = 'Default alarm that monitors the database health status.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'DBHealthStatusClearEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'DBHealthStatusWarningEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'DBHealthStatusErrorEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.RunScriptAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) [],
               script = '/bin/service-control --ignore --stop vmware-vpxd'
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-92',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.70319Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Host IP Address Conflict Alarm',
   systemName = 'alarm.HostIpConflictAlarm',
   description = 'Default alarm to indicate that the host has taken an IP address that conflicts with another host.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [],
            eventType = vim.event.EventEx,
            eventTypeId = 'com.vmware.vc.host.HostIpConflictEvent',
            objectType = vim.HostSystem,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = true
               }
            ],
            green2yellow = false,
            yellow2red = false,
            red2yellow = false,
            yellow2green = false
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-93',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.753145Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'VMware HTTP Reverse Proxy Service Health Alarm.',
   systemName = 'alarm.VmwareRhttpproxyHealthAlarm',
   description = 'Default alarm that monitors the health status of HTTP Reverse Proxy Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rhttpproxy'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rhttpproxy'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rhttpproxy'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'rhttpproxy'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-94',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.834941Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vSphere UI Health Alarm',
   systemName = 'alarm.VsphereUiHealthAlarm',
   description = 'vSphere UI service alarm to monitor health status',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-ui'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-ui'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-ui'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vsphere-ui'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-95',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.878936Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vCenter Stats Monitor Service Health Alarm.',
   systemName = 'alarm.StatsmonitorHealthAlarm',
   description = 'Default alarm that monitors the health status of vCenter Stats Monitor Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'statsmonitor'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'statsmonitor'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'statsmonitor'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'statsmonitor'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-96',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:36.962839Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'vCenter HA Service Health Alarm.',
   systemName = 'alarm.VchaHealthAlarm',
   description = 'Default alarm that monitors the health status of vCenter HA Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vcha'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vcha'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vcha'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'vcha'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-97',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.008471Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'PSC Service Health Alarm.',
   systemName = 'alarm.PscHealthAlarm',
   description = 'Default alarm that monitors the health status of PSC Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'pschealth'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'pschealth'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'pschealth'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'pschealth'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-98',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.086287Z,
   lastModifiedUser = '',
   creationEventId = 0
}
(vim.alarm.AlarmInfo) {
   dynamicType = <unset>,
   dynamicProperty = (vmodl.DynamicProperty) [],
   name = 'Image Builder Service Health Alarm',
   systemName = 'alarm.ImageBuilderHealthAlarm',
   description = 'Default alarm that monitors the health status of Image Builder Service.',
   enabled = true,
   expression = (vim.alarm.OrAlarmExpression) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      expression = (vim.alarm.AlarmExpression) [
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'imagebuilder'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'green'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'green'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'imagebuilder'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'yellow'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'imagebuilder'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'orange'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'yellow'
         },
         (vim.alarm.EventAlarmExpression) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            comparisons = (vim.alarm.EventAlarmExpression.Comparison) [
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'componentId',
                  operator = 'equals',
                  value = 'imagebuilder'
               },
               (vim.alarm.EventAlarmExpression.Comparison) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  attributeName = 'newStatus',
                  operator = 'equals',
                  value = 'red'
               }
            ],
            eventType = vim.event.HealthStatusChangedEvent,
            eventTypeId = 'vim.event.HealthStatusChangedEvent',
            objectType = <unset>,
            status = 'red'
         }
      ]
   },
   action = (vim.alarm.GroupAlarmAction) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      action = (vim.alarm.AlarmAction) [
         (vim.alarm.AlarmTriggeringAction) {
            dynamicType = <unset>,
            dynamicProperty = (vmodl.DynamicProperty) [],
            action = (vim.action.SendSNMPAction) {
               dynamicType = <unset>,
               dynamicProperty = (vmodl.DynamicProperty) []
            },
            transitionSpecs = (vim.alarm.AlarmTriggeringAction.TransitionSpec) [
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'green',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'red',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'red',
                  finalState = 'yellow',
                  repeats = false
               },
               (vim.alarm.AlarmTriggeringAction.TransitionSpec) {
                  dynamicType = <unset>,
                  dynamicProperty = (vmodl.DynamicProperty) [],
                  startState = 'yellow',
                  finalState = 'green',
                  repeats = false
               }
            ],
            green2yellow = true,
            yellow2red = true,
            red2yellow = true,
            yellow2green = true
         }
      ]
   },
   actionFrequency = <unset>,
   setting = (vim.alarm.AlarmSetting) {
      dynamicType = <unset>,
      dynamicProperty = (vmodl.DynamicProperty) [],
      toleranceRange = 0,
      reportingFrequency = 300
   },
   alarmMetadata = <unset>,
   key = '',
   alarm = 'vim.alarm.Alarm:alarm-99',
   entity = 'vim.Folder:group-d1',
   lastModifiedTime = 2019-03-27T13:53:37.158167Z,
   lastModifiedUser = '',
   creationEventId = 0
}
